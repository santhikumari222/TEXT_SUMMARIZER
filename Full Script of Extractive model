from datasets import load_dataset
from transformers import BertTokenizerFast, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.metrics import accuracy_score
import torch

# Load dataset
dataset = load_dataset("cnn_dailymail", "3.0.0")

# Initialize the tokenizer
tokenizer = BertTokenizerFast.from_pretrained("bert-base-uncased")

def preprocess_data(examples):
    inputs = tokenizer(examples['article'], padding="max_length", truncation=True, max_length=512, return_tensors="pt")
    targets = tokenizer(examples['highlights'], padding="max_length", truncation=True, max_length=128, return_tensors="pt")
    inputs['labels'] = targets['input_ids']
    return inputs

# Apply the preprocessing
processed_dataset = dataset.map(preprocess_data, batched=True)

# Split the dataset
train_data, test_data = processed_dataset['train'].train_test_split(test_size=0.1).values()

# Format the datasets
train_data.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
test_data.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Initialize the model
model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
)

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_data,
    eval_dataset=test_data,
)

# Train the model
trainer.train()

# Save the model
model.save_pretrained("./extractive_model")
tokenizer.save_pretrained("./extractive_model")

# Load the tokenizer and the trained model
tokenizer = BertTokenizerFast.from_pretrained("./extractive_model")
model = BertForSequenceClassification.from_pretrained("./extractive_model")

# Function to preprocess input text
def preprocess_data(texts, max_length=512):
    inputs = tokenizer(
        texts, padding="max_length", truncation=True, max_length=max_length, return_tensors="pt"
    )
    return inputs

# Evaluate the model
def evaluate(model, dataset):
    model.eval()
    predictions, true_labels = [], []
    for batch in dataset:
        inputs = {
            "input_ids": batch["input_ids"].unsqueeze(0),
            "attention_mask": batch["attention_mask"].unsqueeze(0),
        }
        with torch.no_grad():
            outputs = model(**inputs)
        preds = torch.argmax(outputs.logits, dim=-1).item()
        predictions.append(preds)
        true_labels.append(batch["labels"].item())
    return accuracy_score(true_labels, predictions)

# Calculate accuracy
accuracy = evaluate(model, test_data)
print("Accuracy:", accuracy)
