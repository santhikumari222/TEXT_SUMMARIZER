from transformers import BertTokenizerFast, BertForSequenceClassification
import torch
from sklearn.metrics import accuracy_score

# Load the tokenizer and the trained model
tokenizer = BertTokenizerFast.from_pretrained("./extractive_model")
model = BertForSequenceClassification.from_pretrained("./extractive_model")

# Function to preprocess input text
def preprocess_data(texts, max_length=512):
    inputs = tokenizer(
        texts, padding="max_length", truncation=True, max_length=max_length, return_tensors="pt"
    )
    return inputs

# Evaluate the model
def evaluate(model, dataset):
    model.eval()
    predictions, true_labels = [], []
    for batch in dataset:
        inputs = {
            "input_ids": batch["input_ids"].unsqueeze(0),
            "attention_mask": batch["attention_mask"].unsqueeze(0),
        }
        with torch.no_grad():
            outputs = model(**inputs)
        preds = torch.argmax(outputs.logits, dim=-1).item()
        predictions.append(preds)
        true_labels.append(batch["labels"].item())
    return accuracy_score(true_labels, predictions)

# Calculate accuracy
accuracy = evaluate(model, test_data)
print("Accuracy:", accuracy)
