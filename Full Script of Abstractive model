from datasets import load_dataset, load_metric
from transformers import T5Tokenizer, T5ForConditionalGeneration, Trainer, TrainingArguments
import torch
from sklearn.model_selection import train_test_split

# Load dataset
dataset = load_dataset("cnn_dailymail", "3.0.0")

# Initialize the tokenizer
tokenizer = T5Tokenizer.from_pretrained("t5-small")

def preprocess_data(examples):
    inputs = ["summarize: " + doc for doc in examples['article']]
    model_inputs = tokenizer(inputs, max_length=512, truncation=True, padding="max_length", return_tensors="pt")
    
    with tokenizer.as_target_tokenizer():
        labels = tokenizer(examples['highlights'], max_length=128, truncation=True, padding="max_length", return_tensors="pt")
    
    model_inputs['labels'] = labels['input_ids']
    return model_inputs

# Apply the preprocessing
processed_dataset = dataset.map(preprocess_data, batched=True, remove_columns=dataset["train"].column_names)

# Split the dataset
train_data, test_data = processed_dataset['train'].train_test_split(test_size=0.1).values()

# Format the datasets
train_data.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])
test_data.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

# Initialize the model
model = T5ForConditionalGeneration.from_pretrained("t5-small")

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=5e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    weight_decay=0.01,
)

# Initialize Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_data,
    eval_dataset=test_data,
)

# Train the model
trainer.train()

# Save the model
model.save_pretrained("./abstractive_model")
tokenizer.save_pretrained("./abstractive_model")

# Load the tokenizer and the trained model
tokenizer = T5Tokenizer.from_pretrained("./abstractive_model")
model = T5ForConditionalGeneration.from_pretrained("./abstractive_model")

# Evaluate the model
def evaluate(model, dataset):
    model.eval()
    predictions, references = [], []
    for batch in dataset:
        inputs = {
            "input_ids": batch["input_ids"].unsqueeze(0),
            "attention_mask": batch["attention_mask"].unsqueeze(0),
        }
        with torch.no_grad():
            outputs = model.generate(inputs["input_ids"], max_length=128, num_beams=4, early_stopping=True)
        pred = tokenizer.decode(outputs[0], skip_special_tokens=True)
        ref = tokenizer.decode(batch["labels"], skip_special_tokens=True)
        predictions.append(pred)
        references.append(ref)
    return predictions, references

# Calculate accuracy (using ROUGE score as an approximation for summarization)
metric = load_metric("rouge")

predictions, references = evaluate(model, test_data)

# Compute ROUGE scores
results = metric.compute(predictions=predictions, references=references, use_stemmer=True)
rougeL = results["rougeL"].mid.fmeasure
print(f"ROUGE-L Score: {rougeL:.4f}")
